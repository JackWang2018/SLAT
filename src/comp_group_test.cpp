/**
 * @file   comp_group_test.cpp
 * @author Michael Gauland <michael.gauland@canterbury.ac.nz>
 * @date   Mon Nov 16 15:29:29 2015
 * 
 * @brief Unit tests for classes declared in comp_group.h.
 * 
 * This file part of SLAT (the Seismic Loss Assessment Tool).
 *
 * Â©2015 Canterbury University
 */

#include "comp_group.h"
#include "relationships.h"
#include <boost/test/unit_test.hpp>

using namespace std;
using namespace SLAT;

BOOST_AUTO_TEST_CASE(comp_group_edp_test)
{
    shared_ptr<DeterministicFn> im_rate_function(
        new NonLinearHyperbolicLaw(1221, 29.8, 62.2));
    shared_ptr<IM> im_rate_rel(
        new IM(im_rate_function));

    shared_ptr<DeterministicFn> mu_edp(
        new PowerLawParametricCurve(0.1, 1.5));
    shared_ptr<DeterministicFn> sigma_edp(
        new PowerLawParametricCurve(0.5, 0.0));
    shared_ptr<ProbabilisticFn> edp_im_relationship(
        new LogNormalFn(mu_edp, LogNormalFn::MEAN_X, sigma_edp, LogNormalFn::SIGMA_LN_X));

    std::shared_ptr<EDP> rel(new EDP(im_rate_rel, edp_im_relationship));

    std::shared_ptr<FragilityFn> fragFn(new FragilityFn(
                                            { LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(0.0062, 0.4),
                                                    LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(0.0230, 0.4),
                                                    LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(0.0440, 0.4),
                                                    LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(0.0564, 0.4)}));
    std::shared_ptr<LossFn> costFn(new LossFn(
                                       { LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(0.03, 0.4),
                                               LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(0.08, 0.4),
                                               LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(0.25, 0.4),
                                               LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(1.00, 0.4)}));
    
    std::shared_ptr<LossFn> delayFn(new LossFn(
                                        { LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(1.50, 0.20),
                                                LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(3.75, 0.25), 
                                                LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(10.0, 0.30),
                                                LogNormalDist::LogNormalDist_from_mean_X_and_sigma_lnX(23.0, 0.35)}));

    CompGroup  component_group(rel, fragFn, costFn, delayFn, 1);

    const struct { double edp, mu_loss, sd_loss, mu_delay, sd_delay; } test_data[] = {
        { 0.001, 1.93873040272997e-07,  3.47987132394903, 9.6936520552257e-06,  3.46258637879091 },
        {  0.0025050505050505, 0.000582994894259666,  2.02503942955232,  0.0291497334122114,  1.99519016183297 },
        { 0.00401010101010101,  0.00560814246654427,  1.35548759227003,   0.280403251713472,  1.31046331057705 },
        { 0.00551515151515152,   0.0139118688613512, 0.965457949400497,   0.695498564048872, 0.900982322943249 },
        { 0.00702020202020202,   0.0209983218227967, 0.731719775233439,    1.04918884363719, 0.642996856494479 },
        { 0.00852525252525253,   0.0257866094288791, 0.611814515628875,      1.286331645331, 0.496118119279071 },
        {   0.010030303030303,   0.0291644819821245, 0.589650905789944,    1.44961965253114, 0.448390101719482 },
        {  0.0115353535353535,   0.0321861392819618, 0.644568118710147,    1.58953059902188, 0.476227727202659 },
        {   0.013040404040404,   0.0355669381919485, 0.743669962487126,    1.73881115017376, 0.540145724924414 },
        {  0.0145454545454545,    0.039722467920839, 0.855903969698538,    1.91399324706395, 0.611905480382447 },
        {  0.0160505050505051,   0.0449061147548354, 0.960825142653713,    2.12198131558098, 0.679261781702538 },
        {  0.0175555555555556,   0.0513118927727996,  1.04831883999884,    2.36526881068029, 0.738180537539536 },
        {  0.0190606060606061,   0.0591245015859234,  1.11524100057623,    2.64489595423536, 0.787569567901326 },
        {  0.0205656565656566,   0.0685300147997496,   1.1622098555976,    2.96168990562432,  0.82727522107632 },
        {  0.0220707070707071,   0.0797048885173563,  1.19151720467215,    3.31649697165177, 0.857557203655655 },
        {  0.0235757575757576,   0.0927973137855343,  1.20600292015265,    3.70995641226687, 0.878981022967607 },
        {  0.0250808080808081,    0.107909765634935,  1.20850217886874,    4.14216067175281, 0.892354258029006 },
        {  0.0265858585858586,    0.125087151373553,  1.20159135108874,    4.61238071237385, 0.898639929236568 },
        {  0.0280909090909091,    0.144311841010493,  1.18748813188097,    5.11892357423099, 0.898864354812875 },
        {  0.0295959595959596,    0.165505011278759,  1.16803355693633,    5.65912499068499, 0.894040318336408 },
        {  0.0311010101010101,    0.188532852528551,  1.14471671201617,    6.22944933965102, 0.885113960794984 },
        {  0.0326060606060606,    0.213215945826187,  1.11871899823039,     6.8256597061854, 0.872934515190449 },
        {  0.0341111111111111,    0.239340243077892,  1.09096414605696,    7.44302276478129, 0.858241906430593 },
        {  0.0356161616161616,    0.266668381109475,  1.06216629851256,    8.07652019767276, 0.841666512106316 },
        {  0.0371212121212121,     0.29495040750988,  1.03287250039411,    8.72104668301231, 0.823736207236508 },
        {  0.0386262626262626,    0.323933321942185,  1.00349837933343,    9.37158215675637, 0.804887096199955 },
        {  0.0401313131313131,    0.353369108702089, 0.974357143602419,     10.023332252252,  0.78547554116194 },
        {  0.0416363636363636,    0.383021144609071, 0.945682645600973,     10.671835375449, 0.765790041712858 },
        {  0.0431414141414141,    0.412669013663345, 0.917647466977519,    11.3130379294316, 0.746062185867754 },
        {  0.0446464646464646,    0.442111855184327, 0.890376970843541,    11.9433410381683, 0.726476324784294 },
        {  0.0461515151515152,    0.471170426252686, 0.863960159073356,    12.5596230379994,  0.70717788430873 },
        {  0.0476565656565657,    0.499688082824663, 0.838458034608221,    13.1592422792906, 0.688280370978226 },
        {  0.0491616161616162,    0.527530886120697, 0.813910032970174,    13.7400246332645, 0.669871200664389 },
        {  0.0506666666666667,    0.554587029296979, 0.790338967824327,    14.3002397010879, 0.652016504227138 },
        {  0.0521717171717172,    0.580765759719097, 0.767754836455886,    14.8385691973312, 0.634765065823829 },
        {  0.0536767676767677,    0.605995948544945, 0.746157751774659,    15.3540704124915, 0.618151538058048 },
        {  0.0551818181818182,    0.630224434677856, 0.725540205348536,    15.8461371038629, 0.602199061212321 },
        {  0.0566868686868687,     0.65341424635303, 0.705888817939764,     16.314459652914, 0.586921395488282 },
        {  0.0581919191919192,    0.675542781798947, 0.687185697180612,    16.7589858771199, 0.572324657628373 },
        {  0.0596969696969697,    0.696600011156826, 0.669409493896749,    17.1798835009612,  0.55840873751218 },
        {  0.0612020202020202,    0.716586745357077, 0.652536227147665,    17.5775049738621, 0.545168456650793 },
        {  0.0627070707070707,    0.735513003909487, 0.636539931710902,     17.952355067517, 0.532594518937867 },
        {  0.0642121212121212,    0.753396502380918,  0.62139316925897,    18.3050614845774, 0.520674294381387 },
        {  0.0657171717171717,    0.770261271446563, 0.607067434924507,    18.6363485574422, 0.509392468594367 },
        {  0.0672222222222222,    0.786136412509419, 0.593533483608935,    18.9470140023153, 0.498731584314224 },
        {  0.0687272727272727,    0.801054989684601, 0.580761594727289,    19.2379086126291, 0.488672495914455 },
        {  0.0702323232323232,     0.81505305415275, 0.568721789695846,     19.509918720982, 0.479194753562324 },
        {  0.0717373737373737,    0.828168794238142,  0.55738401305968,    19.7639512243315, 0.470276930187661 },
        {  0.0732424242424242,    0.840441802831414, 0.546718285500172,    20.0009209486046, 0.461896901615221 },
        {  0.0747474747474747,    0.851912452755684, 0.536694834890298,    20.2217401222086, 0.454032087957223 },
        {  0.0762525252525253,    0.862621370201147, 0.527284209952286,    20.4273097299597, 0.446659662565934 },
        {  0.0777575757575757,    0.872608996288849, 0.518457379822977,    20.6185125271294,  0.43975673342838 },
        {  0.0792626262626263,    0.881915227056994, 0.510185821874197,    20.7962075056228, 0.433300500779919 },
        {  0.0807676767676768,    0.890579122602871, 0.502441599412021,    20.9612256191935, 0.427268393865008 },
        {  0.0822727272727273,    0.898638676689509, 0.495197430345213,    21.1143665908674,  0.42163818913475 },
        {  0.0837777777777778,    0.906130638783784, 0.488426747532734,    21.2563966425293, 0.416388111701388 },
        {  0.0852828282828283,    0.913090381190115,  0.48210375126275,    21.3880470032556, 0.411496921535053 },
        {  0.0867878787878788,    0.919551804650391, 0.476203454155316,    21.5100130690398, 0.406943985657726 },
        {  0.0882929292929293,    0.925547276473821,  0.47070171869577,    21.6229541017193, 0.402709337438008 },
        {  0.0897979797979798,    0.931107595924623, 0.465575287576875,    21.7274933690243, 0.398773723996132 },
        {  0.0913030303030303,     0.93626198222048, 0.460801807038706,    21.8242186406031, 0.395118642673754 },
        {  0.0928080808080808,    0.941038081074367, 0.456359843432294,    21.9136829666207, 0.391726367492855 },
        {  0.0943131313131313,      0.9454619862435, 0.452228893284969,    21.9964056760745, 0.388579966511308 },
        {  0.0958181818181818,    0.949558273030973, 0.448389387202921,    22.0728735413752, 0.385663310970657 },
        {  0.0973232323232323,    0.953350041118831, 0.444822688002838,    22.1435420640546, 0.382961077118557 },
        {  0.0988282828282828,    0.956858964497797,  0.44151108351449,    22.2088368437747, 0.380458741570222 },
        {   0.100333333333333,    0.960105346601324, 0.438437774536408,    22.2691549991896, 0.378142571047987 },
        {   0.101838383838384,    0.963108179053047, 0.435586858455528,    22.3248666147561,  0.37599960730497 },
        {   0.103343434343434,    0.965885202700578, 0.432943309058065,    22.3763161923693, 0.374017647998077 },
        {   0.104848484848485,    0.968452969838181, 0.430492953063158,    22.4238240908068, 0.372185224228123 },
        {   0.106353535353535,    0.970826906719596, 0.428222443904015,    22.4676879394698, 0.370491575412088 },
        {   0.107858585858586,    0.973021375633479, 0.426119233264543,    22.5081840158885, 0.368926622095929 },
        {   0.109363636363636,    0.975049735960446, 0.424171540854729,    22.5455685789698, 0.367480937257704 },
        {   0.110868686868687,    0.976924403755671, 0.422368322876701,    22.5800791520751, 0.366145716591374 },
        {   0.112373737373737,    0.978656909506774, 0.420699239597616,    22.6119357517745, 0.364912748203008 },
        {   0.113878787878788,     0.98025795380588, 0.419154622406513,    22.6413420595749, 0.363774382094352 },
        {   0.115383838383838,    0.981737460749374, 0.417725440691839,     22.668486535118, 0.362723499754699 },
        {   0.116888888888889,    0.983104628940883, 0.416403268835509,    22.6935434703108, 0.361753484131443 },
        {   0.118393939393939,    0.984367980024236,  0.41518025357934,    22.7166739846342, 0.360858190203097 },
        {    0.11989898989899,    0.985535404714976, 0.414049081981154,    22.7380269624943, 0.360031916336128 },
        {    0.12140404040404,    0.986614206332891, 0.413002950141581,    22.7577399339638, 0.359269376568872 },
        {   0.122909090909091,    0.987611141865143, 0.412035532848877,    22.7759399006319, 0.358565673931996 },
        {   0.124414141414141,     0.98853246061087, 0.411140954258297,    22.7927441085521, 0.357916274885343 },
        {   0.125919191919192,    0.989383940474634, 0.410313759694848,    22.8082607704745, 0.357316984925373 },
        {   0.127424242424242,    0.990170921988501, 0.409548888643551,    22.8225897396774, 0.356763925395391 },
        {   0.128929292929293,    0.990898340151516, 0.408841648969713,    22.8358231377883, 0.356253511512301 },
        {   0.130434343434343,    0.991570754181545, 0.408187692392955,    22.8480459390173,  0.35578243160808 },
        {   0.131939393939394,    0.992192375278299, 0.407582991222694,    22.8593365132238, 0.355347627571578 },
        {   0.133444444444444,    0.992767092498329, 0.407023816349276,    22.8697671302075,  0.35494627646596 },
        {   0.134949494949495,    0.993298496843211, 0.406506716473723,    22.8794044275604, 0.354575773289092 },
        {   0.136454545454545,    0.993789903661339, 0.406028498549933,    22.8883098443541, 0.354233714837976 },
        {   0.137959595959596,    0.994244373461974, 0.405586209405841,    22.8965400228497, 0.353917884633739 },
        {   0.139464646464646,    0.994664731237692, 0.405177118504417,    22.9041471803342, 0.353626238860506 },
        {   0.140969696969697,    0.995053584388265, 0.404798701801076,    22.9111794530881, 0.353356893269391 },
        {   0.142474747474747,     0.99541333933553, 0.404448626651043,    22.9176812143939, 0.353108110997792 },
        {   0.143979797979798,    0.995746216914995, 0.404124737718263,    22.9236933683925, 0.352878291253792 },
        {   0.145484848484848,    0.996054266625932, 0.403825043836253,    22.9292536214952, 0.352665958815886 },
        {   0.146989898989899,    0.996339379817654, 0.403547705770976,    22.9343967329608, 0.352469754299022 },
        {   0.148494949494949,    0.996603301885515, 0.403291024835988,     22.939154746148, 0.352288425139224 },
        {                0.15,    0.996847643546096, 0.403053432310849,    22.9435572018616, 0.352120817250603 },
    };


    // {
    //     im_rate_function->replace(std::make_shared<NonLinearHyperbolicLaw>(2 * 1221, 29.8, 62.2));
    //     mu_edp->replace(std::make_shared<PowerLawParametricCurve>(0.2, 1.5));
    // }
    //Caching::Clear_Caches();
    
    for (size_t i=0; i < sizeof(test_data)/sizeof(test_data[0]); i++) {
        BOOST_CHECK_CLOSE(component_group.E_cost_EDP(test_data[i].edp), 
                          test_data[i].mu_loss,
                          0.1);
       BOOST_CHECK_CLOSE(component_group.SD_ln_cost_EDP(test_data[i].edp), 
                          test_data[i].sd_loss,
                          0.5);
       BOOST_CHECK_CLOSE(component_group.E_delay_EDP(test_data[i].edp), 
                          test_data[i].mu_delay,
                          0.1);
       BOOST_CHECK_CLOSE(component_group.SD_ln_delay_EDP(test_data[i].edp), 
                          test_data[i].sd_delay,
                          0.5);
    }

    const struct { double im, mu_loss, sd_loss; } im_test_data[] = {
    { 1.0000E-03, 0.000, 0.000 }, { 2.6242E-02, 3.1234E-07, 3.411 }, 
    { 5.1485E-02, 1.1151E-04, 2.399 }, { 7.6727E-02, 1.2258E-03, 1.836 },    
    { 0.1020, 4.2789E-03, 1.470 }, { 0.1272, 8.9319E-03, 1.247 }, 
    { 0.1525, 1.4380E-02, 1.163 }, { 0.1777, 2.0246E-02, 1.191 },    
    { 0.2029, 2.6711E-02, 1.264 }, { 0.2282, 3.4360E-02, 1.331 }, 
    { 0.2534, 4.3815E-02, 1.373 }, { 0.2787, 5.5687E-02, 1.390 },    
    { 0.3039, 7.0450E-02, 1.384 }, { 0.3292, 8.8370E-02, 1.363 },
    { 0.3544, 0.1095, 1.331 }, { 0.3796, 0.1338, 1.293 },    
    { 0.4049, 0.1611, 1.251 }, { 0.4301, 0.1908, 1.208 }, { 0.4554, 0.2227, 1.164 }, { 0.4806, 0.2563, 1.120 },    
    { 0.5058, 0.2912, 1.078 }, { 0.5311, 0.3268, 1.037 }, { 0.5563, 0.3627, 0.9971 }, { 0.5816, 0.3985, 0.9593 },    
    { 0.6068, 0.4340, 0.9232 }, { 0.6321, 0.4688, 0.8890 }, { 0.6573, 0.5027, 0.8566 }, { 0.6825, 0.5355, 0.8259 },    
    { 0.7078, 0.5669, 0.7970 }, { 0.7330, 0.5971, 0.7696 }, { 0.7583, 0.6258, 0.7439 }, { 0.7835, 0.6529, 0.7197 },    
    { 0.8088, 0.6786, 0.6969 }, { 0.8340, 0.7028, 0.6755 }, { 0.8592, 0.7254, 0.6555 }, { 0.8845, 0.7466, 0.6368 },    
    { 0.9097, 0.7664, 0.6193 }, { 0.9350, 0.7848, 0.6029 }, { 0.9602, 0.8019, 0.5876 }, { 0.9855, 0.8179, 0.5733 },    
    { 1.011, 0.8326, 0.5600 }, { 1.036, 0.8462, 0.5477 }, { 1.061, 0.8587, 0.5362 }, { 1.086, 0.8703, 0.5256 },    
    { 1.112, 0.8810, 0.5157 }, { 1.137, 0.8909, 0.5065 }, { 1.162, 0.8999, 0.4980 }, { 1.187, 0.9082, 0.4902 },    
    { 1.213, 0.9159, 0.4829 }, { 1.238, 0.9229, 0.4762 }, { 1.263, 0.9294, 0.4701 }, { 1.288, 0.9350, 0.4645 },    
    { 1.314, 0.9404, 0.4592 }, { 1.339, 0.9454, 0.4544 }, { 1.364, 0.9500, 0.4500 }, { 1.389, 0.9541, 0.4459 },    
    { 1.415, 0.9580, 0.4421 }, { 1.440, 0.9615, 0.4386 }, { 1.465, 0.9647, 0.4355 }, { 1.490, 0.9679, 0.4324 },    
    { 1.516, 0.9706, 0.4298 }, { 1.541, 0.9730, 0.4273 }, { 1.566, 0.9753, 0.4251 }, { 1.591, 0.9773, 0.4230 },    
    { 1.617, 0.9792, 0.4211 }, { 1.642, 0.9808, 0.4194 }, { 1.667, 0.9824, 0.4178 }, { 1.692, 0.9839, 0.4163 },    
    { 1.717, 0.9852, 0.4150 }, { 1.743, 0.9861, 0.4138 }, { 1.768, 0.9872, 0.4127 }, { 1.793, 0.9882, 0.4117 },    
    { 1.818, 0.9895, 0.4107 }, { 1.844, 0.9904, 0.4094 }, { 1.869, 0.9911, 0.4090 }, { 1.894, 0.9918, 0.4083 },    
    { 1.919, 0.9924, 0.4076 }, { 1.945, 0.9930, 0.4070 }, { 1.970, 0.9936, 0.4065 }, { 1.995, 0.9941, 0.4060 },    
    { 2.020, 0.9946, 0.4055 }, { 2.046, 0.9950, 0.4051 }, { 2.071, 0.9954, 0.4047 }, { 2.096, 0.9957, 0.4043 },    
    { 2.121, 0.9961, 0.4039 }, { 2.147, 0.9964, 0.4036 }, { 2.172, 0.9967, 0.4033 }, { 2.197, 0.9969, 0.4030 },    
    { 2.222, 0.9972, 0.4028 }, { 2.248, 0.9974, 0.4026 }, { 2.273, 0.9976, 0.4024 }, { 2.298, 0.9978, 0.4022 },    
    { 2.323, 0.9979, 0.4021 }, { 2.349, 0.9981, 0.4019 }, { 2.374, 0.9982, 0.4018 }, { 2.399, 0.9984, 0.4016 },    
    { 2.424, 0.9985, 0.4015 }, { 2.450, 0.9986, 0.4014 }, { 2.475, 0.9987, 0.4013 }, { 2.500, 0.9988, 0.4012 }    
    };    

    //component_group = CompGroup(rel, fragFn, lossFn, 1);
    // Skip first entry, which returns NAN instead of 0, since the integrator can't find anything interesting to look at
    for (size_t i=0; i < sizeof(test_data)/sizeof(test_data[0]); i++) {
        BOOST_CHECK_CLOSE(component_group.E_cost_IM(im_test_data[i].im), 
                          im_test_data[i].mu_loss,
                          0.2);
        BOOST_CHECK_CLOSE(component_group.SD_ln_cost_IM(im_test_data[i].im), 
                          im_test_data[i].sd_loss,
                          0.5);
    }


    //@ TODO: Tests where number of components > 1
    struct { double t, e_annual, e_yearly; } annual_loss_test_data[] = {
        { 1.000, 6.5623E-04, 6.5623E-04 }, { 2.000, 1.2742E-03, 6.3712E-04 }, { 3.000, 1.8563E-03, 6.1876E-04 }, 
        { 4.000, 2.4044E-03, 6.0110E-04 }, { 5.000, 2.9206E-03, 5.8412E-04 }, { 6.000, 3.4067E-03, 5.6779E-04 },
        { 7.000, 3.8646E-03, 5.5208E-04 }, { 8.000, 4.2958E-03, 5.3697E-04 }, { 9.000, 4.7018E-03, 5.2242E-04 },
        { 10.00, 5.0842E-03, 5.0842E-04 }, { 11.00, 5.4444E-03, 4.9494E-04 }, { 12.00, 5.7836E-03, 4.8196E-04 },
        { 13.00, 6.1030E-03, 4.6946E-04 }, { 14.00, 6.4038E-03, 4.5741E-04 }, { 15.00, 6.6871E-03, 4.4581E-04 },
        { 16.00, 6.9539E-03, 4.3462E-04 }, { 17.00, 7.2052E-03, 4.2383E-04 }, { 18.00, 7.4418E-03, 4.1343E-04 },
        { 19.00, 7.6647E-03, 4.0340E-04 }, { 20.00, 7.8745E-03, 3.9373E-04 }, { 21.00, 8.0722E-03, 3.8439E-04 },
        { 22.00, 8.2583E-03, 3.7538E-04 }, { 23.00, 8.4336E-03, 3.6668E-04 }, { 24.00, 8.5987E-03, 3.5828E-04 },
        { 25.00, 8.7542E-03, 3.5017E-04 }, { 26.00, 8.9006E-03, 3.4233E-04 }, { 27.00, 9.0385E-03, 3.3476E-04 },
        { 28.00, 9.1684E-03, 3.2744E-04 }, { 29.00, 9.2907E-03, 3.2037E-04 }, { 30.00, 9.4059E-03, 3.1353E-04 },
        { 31.00, 9.5143E-03, 3.0691E-04 }, { 32.00, 9.6165E-03, 3.0052E-04 }, { 33.00, 9.7127E-03, 2.9432E-04 },
        { 34.00, 9.8033E-03, 2.8833E-04 }, { 35.00, 9.8886E-03, 2.8253E-04 }, { 36.00, 9.9690E-03, 2.7692E-04 },
        { 37.00, 1.0045E-02, 2.7148E-04 }, { 38.00, 1.0116E-02, 2.6621E-04 }, { 39.00, 1.0183E-02, 2.6110E-04 },
        { 40.00, 1.0246E-02, 2.5616E-04 }, { 41.00, 1.0306E-02, 2.5136E-04 }, { 42.00, 1.0362E-02, 2.4671E-04 },
        { 43.00, 1.0415E-02, 2.4220E-04 }, { 44.00, 1.0464E-02, 2.3783E-04 }, { 45.00, 1.0511E-02, 2.3358E-04 },
        { 46.00, 1.0555E-02, 2.2946E-04 }, { 47.00, 1.0597E-02, 2.2547E-04 }, { 48.00, 1.0636E-02, 2.2158E-04 },
        { 49.00, 1.0673E-02, 2.1781E-04 }, { 50.00, 1.0708E-02, 2.1415E-04 }, { 51.00, 1.0740E-02, 2.1059E-04 },
        { 52.00, 1.0771E-02, 2.0713E-04 }, { 53.00, 1.0800E-02, 2.0377E-04 }, { 54.00, 1.0827E-02, 2.0050E-04 },
        { 55.00, 1.0853E-02, 1.9733E-04 }, { 56.00, 1.0877E-02, 1.9423E-04 }, { 57.00, 1.0900E-02, 1.9123E-04 },
        { 58.00, 1.0921E-02, 1.8830E-04 }, { 59.00, 1.0942E-02, 1.8545E-04 }, { 60.00, 1.0961E-02, 1.8268E-04 },
        { 61.00, 1.0979E-02, 1.7998E-04 }, { 62.00, 1.0995E-02, 1.7735E-04 }, { 63.00, 1.1011E-02, 1.7478E-04 },
        { 64.00, 1.1026E-02, 1.7229E-04 }, { 65.00, 1.1040E-02, 1.6985E-04 }, { 66.00, 1.1054E-02, 1.6748E-04 },
        { 67.00, 1.1066E-02, 1.6517E-04 }, { 68.00, 1.1078E-02, 1.6291E-04 }, { 69.00, 1.1089E-02, 1.6071E-04 },
        { 70.00, 1.1100E-02, 1.5857E-04 }, { 71.00, 1.1109E-02, 1.5647E-04 }, { 72.00, 1.1119E-02, 1.5443E-04 },
        { 73.00, 1.1127E-02, 1.5243E-04 }, { 74.00, 1.1136E-02, 1.5048E-04 }, { 75.00, 1.1143E-02, 1.4858E-04 },
        { 76.00, 1.1151E-02, 1.4672E-04 }, { 77.00, 1.1158E-02, 1.4490E-04 }, { 78.00, 1.1164E-02, 1.4313E-04 },
        { 79.00, 1.1170E-02, 1.4139E-04 }, { 80.00, 1.1176E-02, 1.3970E-04 }, { 81.00, 1.1181E-02, 1.3804E-04 },
        { 82.00, 1.1186E-02, 1.3642E-04 }, { 83.00, 1.1191E-02, 1.3483E-04 }, { 84.00, 1.1196E-02, 1.3328E-04 },
        { 85.00, 1.1200E-02, 1.3176E-04 }, { 86.00, 1.1204E-02, 1.3028E-04 }, { 87.00, 1.1208E-02, 1.2882E-04 },
        { 88.00, 1.1211E-02, 1.2740E-04 }, { 89.00, 1.1215E-02, 1.2601E-04 }, { 90.00, 1.1218E-02, 1.2464E-04 },
        { 91.00, 1.1221E-02, 1.2330E-04 }, { 92.00, 1.1223E-02, 1.2199E-04 }, { 93.00, 1.1226E-02, 1.2071E-04 },
        { 94.00, 1.1229E-02, 1.1945E-04 }, { 95.00, 1.1231E-02, 1.1822E-04 }, { 96.00, 1.1233E-02, 1.1701E-04 },
        { 97.00, 1.1235E-02, 1.1583E-04 }, { 98.00, 1.1237E-02, 1.1466E-04 }, { 99.00, 1.1239E-02, 1.1352E-04 },
        { 100.0, 1.1241E-02, 1.1241E-04 },     
    };
    for (size_t i=0; i < sizeof(annual_loss_test_data)/sizeof(annual_loss_test_data[0]); i++) {
        double years = annual_loss_test_data[i].t;
        double annual_loss = component_group.E_cost(years, 0.06);
        BOOST_CHECK_CLOSE(annual_loss, annual_loss_test_data[i].e_annual, 0.2);
        BOOST_CHECK_CLOSE(annual_loss/years, annual_loss_test_data[i].e_yearly, 0.2);
    }

    struct {double loss, rate; } loss_rate_test_data[] = {
        { 1.0000E-04, 4.7032E-02 }, { 1.2089E-04, 4.5311E-02 }, { 1.4616E-04, 4.3607E-02 }, { 1.7669E-04, 4.1920E-02 }, 
        { 2.1361E-04, 4.0249E-02 }, { 2.5825E-04, 3.8593E-02 }, { 3.1221E-04, 3.6950E-02 }, { 3.7745E-04, 3.5347E-02 }, 
        { 4.5631E-04, 3.3703E-02 }, { 5.5166E-04, 3.2095E-02 }, { 6.6693E-04, 3.0496E-02 }, { 8.0628E-04, 2.8903E-02 }, 
        { 9.7475E-04, 2.7315E-02 }, { 1.1784E-03, 2.5730E-02 }, { 1.4246E-03, 2.4149E-02 }, { 1.7223E-03, 2.2572E-02 }, 
        { 2.0822E-03, 2.0976E-02 }, { 2.5173E-03, 1.9434E-02 }, { 3.0433E-03, 1.7883E-02 }, { 3.6791E-03, 1.6353E-02 }, 
        { 4.4479E-03, 1.4853E-02 }, { 5.3773E-03, 1.3394E-02 }, { 6.5008E-03, 1.1987E-02 }, { 7.8592E-03, 1.0643E-02 }, 
        { 9.5013E-03, 9.3747E-03 }, { 1.1487E-02, 8.1887E-03 }, { 1.3887E-02, 7.0982E-03 }, { 1.6788E-02, 6.1064E-03 }, 
        { 2.0296E-02, 5.2145E-03 }, { 2.4537E-02, 4.4236E-03 }, { 2.9664E-02, 3.7300E-03 }, { 3.5862E-02, 3.1292E-03 }, 
        { 4.3356E-02, 2.6140E-03 }, { 5.2415E-02, 2.1758E-03 }, { 6.3367E-02, 1.8063E-03 }, { 7.6607E-02, 1.4962E-03 }, 
        { 9.2614E-02, 1.2369E-03 }, { 0.1120, 1.0205E-03 }, { 0.1354, 8.3996E-04 }, { 0.1636, 6.8915E-04 }, 
        { 0.1978, 5.6286E-04 }, { 0.2392, 4.5683E-04 }, { 0.2892, 3.6776E-04 }, { 0.3496, 2.9251E-04 }, 
        { 0.4226, 2.2919E-04 }, { 0.5109, 1.7614E-04 }, { 0.6177, 1.3213E-04 }, { 0.7467, 9.6224E-05 }, 
        { 0.9028, 6.7716E-05 }, { 1.091, 4.5935E-05 },
    };

    for (size_t i=0; i < sizeof(loss_rate_test_data)/sizeof(loss_rate_test_data[0]); i++) {
        BOOST_CHECK_CLOSE(loss_rate_test_data[i].rate, component_group.lambda_cost(loss_rate_test_data[i].loss), 0.2);
    }
}


