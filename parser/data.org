#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both
  im.paleo <- read.csv("~/Downloads/SLATv1.15_Public/example2_10storeybuilding/IMrateSa15data.txt", skip=2, header=FALSE, sep="")
  palette(c("red", "blue"))
  plot(im.paleo, log="xy", xlab="IM", ylab="lambda", main="IM Rate",
       type="p", col=2, xlim=c(0.01, 2.0), ylim=c(1E-6, 1E0))

  im.neo <- read.csv("example2_im_rate.txt", skip=0, header=TRUE, sep="")
  lines(im.neo$lambda ~ im.neo$IM, col=1)
  legend(x="topright", legend=c("Paleo", "Neo"), fill=palette())
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802WwI.gif]]


#+BEGIN_SRC R :session :exports both :results output
  edp <- list()
  for (i in seq(21)) {
     e = read.csv(sprintf("~/Downloads/SLATv1.15_Public/example2_10storeybuilding/RB_EDP%d.txt", i), skip=2, header=FALSE, sep="")
     e[e == 0] <- NA
     datacol = ncol(e)
     e$median = exp(rowMeans(log(e[,2:ncol(e)]), na.rm=TRUE))
     e$mean = rowMeans(e[,2:ncol(e)], na.rm=TRUE)
     e$C <- rowSums(is.na(e[,2:datacol])) / (datacol - 1)
     edp[[i]] <- e
  }
#+END_SRC

#+RESULTS:
#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both
  plot(NULL, xlim=c(0, 1.5), ylim=c(0.0, 0.06), xlab="IM", ylab="Drift",
       main="Interstory Drift")
  floor.index <- 4
  temp <- edp[[floor.index]]
  for (i in seq(2, ncol(temp) - 3)) {
      points(temp[,1], temp[,i])
  }
  lines(temp$mean ~ edp[[2]][,1], col="blue")
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802jBD.gif]]

#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both
palette(rainbow(21))
plot(NULL, xlim=c(0, 1.5), ylim=c(0, 2), xlab="IM", ylab="EDP")
for (i in seq(1, 21)) {
    if (i %% 2 == 1) {
        lines(edp[[i]]$median ~ edp[[i]]$V1, col=i, lwd=21-i)
    }
}
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802u5o.gif]]

#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both
plot(NULL, xlim=c(0, 1.5), ylim=c(0, 0.04), xlab="IM", ylab="EDP")
for (i in seq(1, 21)) {
    if (i %% 2 == 0) {
        lines(edp[[i]]$median ~ edp[[i]]$V1, col=i, lwd=21-i)
    }
}
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-18022FA.gif]]

#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both
plot(edp[[1]]$C ~ edp[[1]]$V1, type='l', col=1, lwd=21)
for (i in seq(2, 21)) {
    lines(edp[[i]]$C ~ edp[[i]]$V1, col=i, lwd=21-i)
}
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802vUW.gif]]


#+BEGIN_SRC R :session :exports both :results output
e = read.csv(sprintf("~/Downloads/SLATv1.15_Public/example2_10storeybuilding/RB_EDP%d.txt", 2), skip=2, header=FALSE, sep="")
e[e == 0] <- NA
datacol = ncol(e)
e$mean = rowMeans(e[,2:datacol], na.rm=TRUE)
e$median = exp(rowMeans(log(e[,2:datacol]), na.rm=TRUE))
e$C <- rowSums(is.na(e[,2:datacol])) / (datacol - 1)
print(e$median)
print(e$mean)
print(e$C)
#+END_SRC

#+RESULTS:
:  [1] 0.0008320893 0.0014336772 0.0020236092 0.0030425848 0.0056170671
:  [6] 0.0064268926 0.0131587868 0.0161511540 0.0130158757 0.0162137936
: [11] 0.0239067418 0.0183511903 0.0127561435 0.0106468859 0.0087130504
:  [1] 0.0008467975 0.0014862700 0.0026105500 0.0059848611 0.0137081389
:  [6] 0.0159932333 0.0243133478 0.0282533500 0.0237211250 0.0245290000
: [11] 0.0259000000 0.0235281667 0.0208866667 0.0211646667 0.0153512500
:  [1] 0.000 0.000 0.000 0.100 0.100 0.250 0.425 0.500 0.600 0.650 0.800 0.850
: [13] 0.850 0.850 0.900

#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both :results output
  slat.edp <- list()
  for (i in seq(21)) {
     e = read.csv(sprintf("example2_im_edp%d.txt", i), skip=0, header=TRUE, sep="")
     e[e == 0] <- NA
     slat.edp[[i]] <- e
  }
  plot(NULL, xlim=c(0,1.5), ylim=c(0,2), xlab="IM", ylab="EDP")
for (i in seq(1, 21)) {
    if (i %% 2 == 1) {
        lines(slat.edp[[i]]$median_x ~ slat.edp[[i]]$IM, col=i, lwd=21-i)
    }
}
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802xYO.gif]]


#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both :results output
  plot(NULL, xlim=c(0,1.5), ylim=c(0,0.04), xlab="IM", ylab="EDP")
  for (i in seq(1, 21)) {
    if (i %% 2 == 0) {
        lines(slat.edp[[i]]$median_x ~ slat.edp[[i]]$IM, col=i, lwd=21-i)
    }
}
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802Lta.gif]]


#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both :results output
  slat.edp.rate.rate <- list()
  for (i in seq(21)) {
      e = read.csv(sprintf("example2_edp%d_rate.txt", i), skip=0, header=TRUE, sep="")
      e[e == 0] <- NA
      slat.edp.rate[[i]] <- e
  }
  plot(NULL, xlim=c(0.05, 3.0), ylim=c(1E-8, 1), log="y", xlab="Peak Acceleration", ylab="lambda")
  for (i in seq(1, 21)) {
      if (i %% 2 == 1) {
          lines(slat.edp.rate[[i]]$lambda ~ slat.edp.rate[[i]]$EDP, col=i, lwd=21-i)
      }
  }
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802yLt.gif]]

#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both :results output
  plot(NULL, xlim=c(0.05, 3.0), ylim=c(1E-8, 1), log="y", xlab="Interstory Drift", ylab="lambda")
  for (i in seq(1, 21)) {
      if (i %% 2 == 0) {
          lines(slat.edp.rate[[i]]$lambda ~ slat.edp.rate[[i]]$EDP, col=i, lwd=21-i)
      }
  }
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802xfC.gif]]

#+RESULTS:
#+HEADER: :results graphics
#+HEADER: :file (org-babel-temp-file "./figure-" ".gif")
#+BEGIN_SRC R :session :exports both
  plot(NULL, xlim=c(0, 1.5), ylim=c(0.0, 0.06), xlab="IM", ylab="Drift",
       main="Interstory Drift")
  floor.index <- 4
  temp <- edp[[floor.index]]
  for (i in seq(2, ncol(temp) - 3)) {
      points(temp[,1], temp[,i])
  }
  lines(temp$mean ~ edp[[2]][,1], col="blue")

  temp <- slat.edp[[floor.index]]
  lines(temp$mean_x ~ temp$IM, col="red")
#+END_SRC

#+RESULTS:
[[file:/tmp/babel-1802dYN/figure-1802EFP.gif]]

